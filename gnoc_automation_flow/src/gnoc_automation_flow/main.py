import os
from pydantic import BaseModel
from crewai.flow.flow import Flow, listen, start
from crews.send_insensitive_notification_crew.send_insensitive_notification_crew import GoogleSendNoDataCrew
from crews.send_sensitive_notification_crew.send_sensitive_notification_crew import GoogleSendCrew
from crews.status_page_creation_crew.status_page_creation_crew import  StatusPageCreationCrew
from crews.jira_creation_crew.jira_creation_crew import JiraCreationCrew
from crews.google_crew.google_crew import GoogleCrew

class GNOCAutomation(BaseModel):
    description: str = ""
    summary: str = ""
    segment: str = ""
    product: str = ""
    priority: str = ""
    impact: str = ""
    urgency: str = ""
    priority_identification_response: str = ""

    issue_reported: str = ""
    jira_id: str = ""
    status_io_id: str = ""
    white_board_id: str = ""
    white_board_link: str = ""
    subject: str = ""
    # to: list = None
    body: str = ""
    subject1: str = ""
    subject2: str = ""
    body1: str = ""
    body2: str = ""


class GNOCAutomationFlow(Flow[GNOCAutomation]):

    @start()
    def create_issue_reported_user(self):
        print(f"inside create_issue_reported_user method")
        print(f"Issue Summary:-  {self.state.summary}")
        print(f"Issue Description:-  {self.state.description}")
        print(f"Issue Priority:-  {self.state.priority}")
        print(f"Issue Segment:-  {self.state.segment}")
        print(f"Issue Product:-  {self.state.product}")
        print(f"Issue Impact:-  {self.state.impact}")
        print(f"Issue Urgency:-  {self.state.urgency}")

        # self.state.issue_reported = "We are experiencing a critical issue in the merchant segment impacting our Transit product. Customers have been unable to perform Mastercard card transactions for the past 15 minutes, resulting in significant disruption. Approximately 10,000 transactions have been declined during this time, leading to a revenue loss of $50,000. This issue is affecting multiple merchants and requires immediate attention. The root cause appears to be related to the processing system for Mastercard transactions on the Transit product. Please prioritize this issue, as it has a high financial impact and is negatively affecting customer experience."
        #self.state.issue_reported = "We are facing a critical issue in the issuing segment, specifically impacting our INTL Citi Bank product. The problem has resulted in Visa and Mastercard transactions failing across multiple channels. The issue has led to more than 100,000 transaction failures, causing significant disruption to the client’s operations. The estimated revenue loss exceeds $1 million, highlighting the severity of the situation. This outage is negatively impacting customer trust and requires immediate investigation to identify and resolve the root cause. Prompt action is needed to mitigate further losses and restore normal transaction processing for the INTL Citi Bank product."
        return {"data": {}}

    @listen(create_issue_reported_user)
    def create_jira_ticket(self, context):
        print("Create Jira Ticket based on the priority and description generated by LLM.")
        print(f"Summary:- {self.state.summary}")
        print(f"Description:- {self.state.description}")
        print(f"Priority:- {self.state.priority}")
        print(f"Segment:- {self.state.segment}")
        print(f"Product:- {self.state.product}")
        print(f"Impact:- {self.state.impact}")
        print(f"Urgency:- {self.state.urgency}")

        if "This issue does not appear to be related to any GP products, and unfortunately, I am unable to proceed with further action. Thank you for your understanding.".lower() == self.state.description.lower():
            raise ValueError("Issue is not related to GP product")

        result = (
            JiraCreationCrew()
            .crew()
            .kickoff(inputs={"priority": self.state.priority, "description": self.state.description,
                             "summary": self.state.summary, "my_custom_jira_tool_input": {
                    "priority": self.state.priority,
                    "description": self.state.description,
                    "summary": self.state.summary
                }})
        )
        print("\n################################")
        print(f"create_jira_ticket :: Raw result:- {result.raw}")
        self.state.jira_id = result["jira_id"]
        self.state.priority = result["priority"]
        self.state.description = result["description"]
        self.state.summary = result["summary"]

        context["data"]["jira_information"] = result["jira_id"]
        context["data"]["jira_link"] = "https://rahuluraneai.atlassian.net/browse/" + result["jira_id"]
        return context

    @listen(create_jira_ticket)
    def create_status_page_ticket(self, context):
        print("Create Status Page based on the priority and description generated by LLM.")
        print(f"self.state.product : {self.state.product}")
        print(f"self.state.segment : {self.state.segment}")
        product_name=self.state.product
        segment_name = self.state.segment
        print(f"segment_name: {segment_name} product_name - {product_name}")
        result = (
            StatusPageCreationCrew()
            .crew()
            .kickoff(inputs={"jira_id": self.state.jira_id, "priority": self.state.priority, "description": self.state.description, "summary": self.state.summary,"segment": segment_name,"product": product_name, "my_custom_jira_tool_input": {
            "priority": self.state.priority,
            "description": self.state.description,
            "jira_id": self.state.jira_id,
            "summary": self.state.summary,
            "segment": segment_name,
            "product": product_name

        }})
        )
        print("\n################################")
        print(f"create_status_page_ticket :: Raw result:- {result.raw}")

        self.state.status_io_id = result["status_io_id"]
        self.state.white_board_id = result["white_board_id"]
        self.state.white_board_link = result["white_board_link"]

        context["data"]["white_board_information"] = result["white_board_link"]
        context["data"]["status_io_page_information"] = result["status_io_id"]
        context["data"]["status_io_page_link"] = "https://manage.statuspage.io/pages/cgdn7cbyygwm/incidents/" + result["status_io_id"]
        return context

    @listen(create_status_page_ticket)
    def create_email_template(self, context):
        if os.path.exists("EmailTemplate.html"):
            os.remove("EmailTemplate.html")
        else:
            print("EmailTemplate.html file does not exist")

        if os.path.exists("EmailTemplateNoData.html"):
            os.remove("EmailTemplateNoData.html")
        else:
            print("EmailTemplateNoData.html file does not exist")

        print("Creating email template")
        jira_id = self.state.jira_id
        priority = self.state.priority
        description = self.state.description
        impact = self.state.impact
        urgency = self.state.urgency
        summary = self.state.summary
        status_io_id = self.state.status_io_id
        white_board_link = self.state.white_board_link
        result = (
            GoogleCrew()
            .crew()
            .kickoff(inputs={"jira_id": jira_id, "priority": priority, "description": description, "project": "GNOC", "impact": impact, "urgency": urgency, "summary": summary, "status_io_id": status_io_id, "white_board_link": white_board_link})
        )
        print("\n################################")
        print(f"create_email_template :: Raw result:- {result.raw}")
        return context

    @listen(create_email_template)
    def send_email_gmail(self, context):
        print("Send email and calendar invite")
        result = (
            GoogleSendCrew()
            .crew()
            .kickoff()
        )

        print("\n################################")
        print(f"send_email_gmail :: Raw result:- {result.raw}")
        return context

    @listen(create_email_template)
    def send_email_gmail_no_data(self, context):
        print("Send email and calendar invite")
        result = (
            GoogleSendNoDataCrew()
            .crew()
            .kickoff()
        )
        print("\n################################")
        print(f"send_email_gmail_no_data :: Raw result:- {result.raw}")
        return context

def kickoff(summary, description, priority, segment, product, impact, urgency):
    # print(f"issue_reported:- {issue_reported}")
    # issue_reported = "We are experiencing a critical issue in the merchant segment impacting our Transit product. Customers have been unable to perform Mastercard card transactions for the past 15 minutes, resulting in significant disruption. Approximately 10,000 transactions have been declined during this time, leading to a revenue loss of $50,000. This issue is affecting multiple merchants and requires immediate attention. The root cause appears to be related to the processing system for Mastercard transactions on the Transit product. Please prioritize this issue, as it has a high financial impact and is negatively affecting customer experience."
    # issue_reported = "We are facing a critical issue in the issuing segment, specifically impacting our INTL Citi Bank product. The problem has resulted in Visa and Mastercard transactions failing across multiple channels. The issue has led to more than 100,000 transaction failures, causing significant disruption to the client’s operations. The estimated revenue loss exceeds $1 million, highlighting the severity of the situation. This outage is negatively impacting customer trust and requires immediate investigation to identify and resolve the root cause. Prompt action is needed to mitigate further losses and restore normal transaction processing for the INTL Citi Bank product."
    gnoc_identification_flow = GNOCAutomationFlow()
    result = gnoc_identification_flow.kickoff(inputs={"summary": summary, "description": description, "priority": priority, "segment": segment, "product": product, "impact": impact, "urgency": urgency})
    print("******************************************")
    for inner_key, inner_value in result["data"].items():
        print(f"  Inner key: {inner_key}, Inner value: {inner_value}")
    return result



def plot():
    gnoc_identification_flow = GNOCAutomationFlow()
    gnoc_identification_flow.plot()


if __name__ == "__main__":
    kickoff()