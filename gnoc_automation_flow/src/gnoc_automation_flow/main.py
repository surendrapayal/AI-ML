from pydantic import BaseModel
from crewai.flow.flow import Flow, listen, start

from .crews.send_google_no_data_crew.send_google_no_data_crew import GoogleSendNoDataCrew
from .crews.send_google_crew.send_google_crew import GoogleSendCrew
from .crews.status_page_creation_crew.status_page_creation_crew import  StatusPageCreationCrew
from .crews.priority_identification_crew.priority_identification_crew import PriorityIdentificationCrew
from .crews.jira_creation_crew.jira_creation_crew import JiraCreationCrew
from .crews.google_crew.google_crew import GoogleCrew

class GNOCAutomation(BaseModel):
    description: str = ""
    summary: str = ""
    segment: str = ""
    product: str = ""
    priority: str = ""
    impact: str = ""
    urgency: str = ""
    priority_identification_response: str = ""

    issue_reported: str = ""
    jira_id: str = ""
    subject: str = ""
    # to: list = None
    body: str = ""
    subject1: str = ""
    subject2: str = ""
    body1: str = ""
    body2: str = ""

class GNOCAutomationFlow(Flow[GNOCAutomation]):

    @start()
    def generate_issue_reported_user(self):
        print("Generating issue reported by user")
        self.state.issue_reported = "We are experiencing a critical issue in the merchant segment impacting our Transit product. Customers have been unable to perform Mastercard card transactions for the past 15 minutes, resulting in significant disruption. Approximately 10,000 transactions have been declined during this time, leading to a revenue loss of $50,000. This issue is affecting multiple merchants and requires immediate attention. The root cause appears to be related to the processing system for Mastercard transactions on the Transit product. Please prioritize this issue, as it has a high financial impact and is negatively affecting customer experience."
        # self.state.issue_reported = "We are facing a critical issue in the issuing segment, specifically impacting our INTL Citi Bank product. The problem has resulted in Visa and Mastercard transactions failing across multiple channels. The issue has led to more than 100,000 transaction failures, causing significant disruption to the clientâ€™s operations. The estimated revenue loss exceeds $1 million, highlighting the severity of the situation. This outage is negatively impacting customer trust and requires immediate investigation to identify and resolve the root cause. Prompt action is needed to mitigate further losses and restore normal transaction processing for the INTL Citi Bank product."

    @listen(generate_issue_reported_user)
    def identify_priority_of_issue(self):
        print("Identifying the priority of the issue reported by user.")
        result = (
            PriorityIdentificationCrew()
            .crew()
            .kickoff(inputs={"issue_reported": self.state.issue_reported})
        )

        self.state.description = result["description"]
        self.state.summary = result["summary"]
        self.state.segment = result["segment"]
        self.state.product = result["product"]
        self.state.priority = result["priority"]
        self.state.impact = result["impact"]
        self.state.urgency = result["urgency"]
        self.state.priority_identification_response = result.raw
        print("\n################################")
        print(f"identify_priority_of_issue :: Raw result:- {result.raw}")


    # @listen(identify_priority_of_issue)
    # def save_issue_and_priority(self):
    #     print("Saving priority")
    #     with open("PriorityIdentificationResponse.txt", "w") as f:
    #         f.write(self.state.priority_identification_response)

    @listen(identify_priority_of_issue)
    def create_jira_ticket(self):
        print("Create Jira Ticket based on the priority and description generated by LLM.")
        print(f"Priority:- {self.state.priority}")
        print(f"Summary:- {self.state.summary}")
        print(f"Description:- {self.state.description}")
        result = (
            JiraCreationCrew()
            .crew()
            .kickoff(inputs={"priority": self.state.priority, "description": self.state.description,
                             "summary": self.state.summary, "my_custom_jira_tool_input": {
                    "priority": self.state.priority,
                    "description": self.state.description,
                    "summary": self.state.summary
                }})
        )
        print("\n################################")
        print(f"create_jira_ticket :: Raw result:- {result.raw}")
        self.state.jira_id = result["jira_id"]
        self.state.priority = result["priority"]
        self.state.description = result["description"]
        self.state.summary = result["summary"]

    @listen(create_jira_ticket)
    def create_status_page_ticket(self):
        print("Create Status Page based on the priority and description generated by LLM.")
        result = (
            StatusPageCreationCrew()
            .crew()
            .kickoff(inputs={"jira_id": self.state.jira_id, "priority": self.state.priority, "description": self.state.description, "summary": self.state.summary, "my_custom_jira_tool_input": {
            "priority": self.state.priority,
            "description": self.state.description,
            "jira_id": self.state.jira_id,
            "summary": self.state.summary
        }})
        )
        print("\n################################")
        print(f"create_status_page_ticket :: Raw result:- {result.raw}")

    @listen(create_status_page_ticket)
    def create_email_template(self):
        print("Creating email template")
        jira_id = self.state.jira_id
        priority = self.state.priority
        description = self.state.description
        impact = self.state.impact
        urgency = self.state.urgency
        summary = self.state.summary

        result = (
            GoogleCrew()
            .crew()
            .kickoff(inputs={"jira_id": jira_id, "priority": priority, "description": description, "project": "GNOC", "impact": impact, "urgency": urgency, "summary": summary})
        )
        print("\n################################")
        print(f"create_email_template :: Raw result:- {result.raw}")

        i = 0
        for task_output in list(enumerate(result))[3][1][1]:
            print("Attributes of TaskOutput object:")
            for attr, value in vars(task_output).items():
                if attr == "pydantic":
                    print(f"{attr}: {value.subject}")
                    print(f"{attr}: {value.body}")
                    if i == 0:
                        self.state.subject1 = value.subject
                        self.state.body1 = value.body
                        i = i + 1
                    else:
                        self.state.subject2 = value.subject
                        self.state.body2 = value.body
        # print("*****************")
        # print(list(enumerate(result))[3][1][1][0])
        #
        # print("*****************")
        # print(list(enumerate(result))[3][1][1][1])
        #
        # print("##################")
        # print([attr for attr in vars(list(enumerate(result))[3][1][1][0]).items() if attr == "pydantic"])

    @listen(create_email_template)
    def send_email_gmail(self):
        print("Send email and calendar invite")
        print(f"Email subject1:- {self.state.subject1}")
        print(f"Email body1:- {self.state.body1}")
        result = (
            GoogleSendCrew()
            .crew()
            .kickoff(inputs={"subject": self.state.subject1, "body": self.state.body1, "my_custom_google_input": {
            "subject": self.state.subject1,
            "body": self.state.body1
        }})
        )

        print("\n################################")
        print(f"send_email_gmail :: Raw result:- {result.raw}")
        self.state.subject2 = self.state.subject2
        self.state.body2 = self.state.body2

    @listen(create_email_template)
    def send_email_gmail_no_data(self):
        print("Send email and calendar invite")
        print(f"Email subject1:- {self.state.subject1}")
        print(f"Email body1:- {self.state.body1}")
        result = (
            GoogleSendNoDataCrew()
            .crew()
            .kickoff(inputs={"subject": self.state.subject2, "body": self.state.body2, "my_custom_google_input": {
            "subject": self.state.subject2,
            "body": self.state.body2
        }})
        )

        print(f"Email subject2:- {self.state.subject2}")
        print(f"Email body2:- {self.state.body2}")
        self.state.subject2 = self.state.subject2
        self.state.body2 = self.state.body2
        print("result template created", result.raw)

        print("\n################################")
        print(f"send_email_gmail_no_data :: Raw result:- {result.raw}")

def kickoff():
    gnoc_identification_flow = GNOCAutomationFlow()
    gnoc_identification_flow.kickoff()


def plot():
    gnoc_identification_flow = GNOCAutomationFlow()
    gnoc_identification_flow.plot()


if __name__ == "__main__":
    kickoff()
