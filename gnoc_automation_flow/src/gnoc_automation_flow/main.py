#!/usr/bin/env python
from dataclasses import field
from typing import List

from pydantic import BaseModel

from crewai.flow.flow import Flow, listen, start

from .crews.status_page_creation_crew.status_page_creation_crew import  StatusPageCreationCrew
from .types import JiraModel
# from gnoc_automation_flow.src.gnoc_automation_flow.crews.jira_creation_crew.jira_creation_crew import JiraCreationCrew
from .crews.priority_identification_crew.priority_identification_crew import PriorityIdentificationCrew
from .crews.jira_creation_crew.jira_creation_crew import JiraCreationCrew


class PriorityIdentificationState(BaseModel):
    priority: str = ""
    description: str = ""
    issue_reported: str = ""
    jira_id: str =""

class PriorityIdentificationFlow(Flow[PriorityIdentificationState]):

    @start()
    def generate_issue_reported_user(self):
        print("Generating issue reported by user")
        self.state.issue_reported = "As a user I am not able to perform the transaction from the last 15 minutes and due to this over 500K transactions have declined that result in the revenue loss of more than 150K US dollar. Please look into this issue on urgent basis."
        # self.state.issue_reported = "As a user I am not able to perform the transaction from the last 5 minutes and due to this around 100 transactions have declined that result in the revenue loss of around 1000 US dollar. Please look into this issue and provide resolution."

    @listen(generate_issue_reported_user)
    def identify_priority_of_issue(self):
        print("Identifying the priority of the issue reported by user.")
        result = (
            PriorityIdentificationCrew()
            .crew()
            .kickoff(inputs={"issue_reported": self.state.issue_reported})
        )

        # print(f"Priority of the issue:- {result.raw}")
        print(f"Priority:- {result["priority"]}")
        print(f"Description:- {result["description"]}")
        self.state.priority = result["priority"]
        self.state.description = result["description"]

    @listen(identify_priority_of_issue)
    def save_issue_and_priority(self):
        print("Saving priority")
        with open("priority.txt", "w") as f:
            f.write("Issue reported by user:-\n" + self.state.issue_reported + "\n\nPriority predicted by LLM:- " + self.state.priority + "\n\nDescription generated by LLM:- " + self.state.description)

    @listen(save_issue_and_priority)
    def create_jira_ticket(self):
        print("Create Jira Ticket based on the priority and description generated by LLM.")
        result = (
            JiraCreationCrew()
            .crew()
            .kickoff(inputs={"priority": self.state.priority, "description": self.state.description})
        )

        print(f"Jira ticket creation output:- {result.raw}")
        print(f"jiraId:- {result["jira_id"]}")
        print(f"jiraDescription:- {result["description"]}")
        self.state.jira_id = result["jira_id"]
        self.state.priority = result["priority"]
        self.state.description = result["description"]


    @listen(create_jira_ticket)
    def create_status_page_ticket(self):
        print("Create Status Page based on the priority and description generated by LLM.")
        result = (
            StatusPageCreationCrew()
            .crew()
            #.kickoff()
            .kickoff(inputs={"priority": self.state.priority, "description": self.state.description, "jira_id": self.state.jira_id})
        )
        print("\n\n################################\n\n")
        print(f"Status Page Creation Output:- {result}")
        print("\n\n################################\n\n")

def kickoff():
    priority_identification_flow = PriorityIdentificationFlow()
    priority_identification_flow.kickoff()


def plot():
    priority_identification_flow = PriorityIdentificationFlow()
    priority_identification_flow.plot()


if __name__ == "__main__":
    kickoff()
